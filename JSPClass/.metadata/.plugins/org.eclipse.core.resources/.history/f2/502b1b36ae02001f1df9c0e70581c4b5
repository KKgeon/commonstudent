<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Insert title here</title>
<link rel="shortcut icon" href="http://localhost/jspPro/images/favicon.ico">
<script
	src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<link rel="stylesheet" href="http://localhost/jspPro/resources/cdn-main/example.css">
<script src="http://localhost/jspPro/resources/cdn-main/example.js"></script>
<style>
 span.material-symbols-outlined{
    vertical-align: text-bottom;
 }
</style>
</head>
<body>
<header>
  <h1 class="main"><a href="#" style="position: absolute;top:30px;">bonobono</a></h1>
  <ul>
    <li><a href="#">로그인</a></li>
    <li><a href="#">회원가입</a></li>
  </ul>
</header>
<h3>
  <span class="material-symbols-outlined">view_list</span> jsp days00
</h3>
<div>
  <xmp class="code">
       [ex05.jsp]
       
       1. 모델2구조의 MVC 패턴
       	1) 모델 1 구조
       		[list.jsp] -> 요청 -> list.jsp
       		 		   <- 응답 <-	
       	2) 모델 2 구조
			[lit.htm]  -> 요청 -> [서버]
								로직처리 담당자(서블릿)
								request.setAttribute("list",list)
								
								출력담당자(jsp)
								list.jsp
								request.getAttribute("list",list)
						<- 응답 <-
					여러 형태의 디자인패턴 - MVP, [MVC패턴], MVVC 등등
		2. MVC 패턴
			Model - 각각의 요청마다 로직을 처리 ( 비즈니스 영역 ) 클래스
			View - 사용자가 보게 될 화면 출력 담당 (프리젠테이션 영역)
			Controller - [요청 -> 응답] 흐름 제어 담당 -- 서블릿
			
			사용자 list.htm -> 요청 -> 
			
			
		3. 실습		[게시판 구현 -> MVC 패턴으로 수정]
			1) days04 > board 폴더	복사해서 days06 폴더 붙이기. - M[V]C
			
			
			
			2) days04.board 패키지				- 서블릿 List, java 등등
			   days04.board.domain 패키지			- VO, DTO
			   days04.board.persistence 패키지 	- DAO
			   
			   days06.mvc.domain 패키지
			   days06.mvc.persistence 패키지
			   days06.mvc.command 패키지 - [M]VC
			   days06.mvc.service 패키지
			   days06.mvc.controller 패키지 MV[C]
			   
			3) 모든 요청 -> 흐름 제어 MV[C] 컨트롤러
				
				
				
				ㄱ. 서블릿
					uri-pattern : 4가지 
									/	[*.do]
				ㄴ. /board/list.do,write.do,edit.do,delete.do 약속
						파일생성 
						WEB-INF 폴더 안 commandHandler.properties
						/board/list.do=모델
						/board/write.do=모델
				ㄷ. 컨트롤러 역할 - DispatcherServlet
				모든 요청 -> list.do, write.do 등등
							1) 요청 url 파악
							2) commandHandler.properties 찾아서
								list.do=[모델객체]
								요청 처리할 모델객체 얻어와서
										CommandHandler.java 인터페이스 process()
									CommandHandler command = ListHandler.java
																process() r.s()
									list.jsp + 포/리 = command.process();
							
			  4) web_days05.xml --원래 있던 web.xml의 이름은 변경
			  	 web.xml
  </xmp>  
</div>

<script>
</script>
</body>
</html>